{"uid":"2d44ad5e23b6d5dd","name":"User is able to change country code","fullName":"tests.test_login.TestLogin#test_country_code_change","historyId":"b3fd85ef19f2a584247374779ac47c1a","time":{"start":1683293386081,"stop":1683293416317,"duration":30236},"description":"User is able to change country code","descriptionHtml":"<p>User is able to change country code</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <tests.test_login.TestLogin object at 0x7f61e32a4700>\ncountry_code_data = {'code': '+93', 'country': 'Afghanistan'}\n\n    @allure.description(\"User is able to change country code\")\n    @allure.title(\"User is able to change country code\")\n    def test_country_code_change(self,country_code_data):\n           self.nav_bar.click_login_icon()\n>          self.login_page.click_code_country()\n\ntests/test_login.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/login_page.py:55: in click_code_country\n    self.click(self.COUNTRY_CODE_COMBOBOX)\npages/base_page.py:17: in click\n    element: WebElement = self.wait.until(expected_conditions.visibility_of_element_located(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"4b0b1b27cedaf38238b5fcb7f3cff2ea\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x7f61e144cc10>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1683293383284,"stop":1683293386080,"duration":2796},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"attach_artifacts_on_failure","time":{"start":1683293383284,"stop":1683293383284,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"country_code_data","time":{"start":1683293386081,"stop":1683293386081,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"User is able to change country code","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <tests.test_login.TestLogin object at 0x7f61e32a4700>\ncountry_code_data = {'code': '+93', 'country': 'Afghanistan'}\n\n    @allure.description(\"User is able to change country code\")\n    @allure.title(\"User is able to change country code\")\n    def test_country_code_change(self,country_code_data):\n           self.nav_bar.click_login_icon()\n>          self.login_page.click_code_country()\n\ntests/test_login.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/login_page.py:55: in click_code_country\n    self.click(self.COUNTRY_CODE_COMBOBOX)\npages/base_page.py:17: in click\n    element: WebElement = self.wait.until(expected_conditions.visibility_of_element_located(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"4b0b1b27cedaf38238b5fcb7f3cff2ea\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x7f61e144cc10>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException","steps":[{"name":"User clicks login icon in nav bar","time":{"start":1683293386082,"stop":1683293386232,"duration":150},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"User clicks to change country code","time":{"start":1683293386232,"stop":1683293416316,"duration":30084},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/selenium-python/selenium-python/pages/login_page.py\", line 55, in click_code_country\n    self.click(self.COUNTRY_CODE_COMBOBOX)\n  File \"/home/runner/work/selenium-python/selenium-python/pages/base_page.py\", line 17, in click\n    element: WebElement = self.wait.until(expected_conditions.visibility_of_element_located(locator))\n  File \"/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py\", line 95, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[{"uid":"bdab7072616cfa6b","name":"log","source":"bdab7072616cfa6b.txt","type":"text/plain","size":2189}],"parameters":[],"stepsCount":2,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1683293416325,"stop":1683293416326,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"attach_artifacts_on_failure::0","time":{"start":1683293416326,"stop":1683293416498,"duration":172},"status":"broken","statusMessage":"urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=33877): Max retries exceeded with url: /session/4b0b1b27cedaf38238b5fcb7f3cff2ea/window (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f61e0f8ca60>: Failed to establish a new connection: [Errno 111] Connection refused'))\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/allure_commons/_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/_pytest/fixtures.py\", line 918, in _teardown_yield_fixture\n    next(it)\n  File \"/home/runner/work/selenium-python/selenium-python/tests/conftest.py\", line 67, in attach_artifacts_on_failure\n    request.cls.driver.close()\n  File \"/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 551, in close\n    self.execute(Command.CLOSE)\n  File \"/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 438, in execute\n    response = self.command_executor.execute(driver_command, params)\n  File \"/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/remote/remote_connection.py\", line 290, in execute\n    return self._request(command_info[0], url, body=data)\n  File \"/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/remote/remote_connection.py\", line 311, in _request\n    response = self._conn.request(method, url, body=body, headers=headers)\n  File \"/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/urllib3/request.py\", line 74, in request\n    return self.request_encode_url(\n  File \"/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/urllib3/request.py\", line 96, in request_encode_url\n    return self.urlopen(method, url, **extra_kw)\n  File \"/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/urllib3/poolmanager.py\", line 376, in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\n  File \"/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 815, in urlopen\n    return self.urlopen(\n  File \"/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 815, in urlopen\n    return self.urlopen(\n  File \"/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 815, in urlopen\n    return self.urlopen(\n  File \"/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/urllib3/connectionpool.py\", line 787, in urlopen\n    retries = retries.increment(\n  File \"/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/urllib3/util/retry.py\", line 592, in increment\n    raise MaxRetryError(_pool, url, error or ResponseError(cause))\n","steps":[],"attachments":[{"uid":"40b604ee05091ea2","name":"Console Logs","source":"40b604ee05091ea2.json","type":"application/json","size":518},{"uid":"67934d9d2bffe253","name":"Screenshot","source":"67934d9d2bffe253.png","type":"image/png","size":37491}],"parameters":[],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true}],"labels":[{"name":"epic","value":"Login functionality"},{"name":"story","value":"Login functionality"},{"name":"tag","value":"@pytest.mark.usefixtures('setup')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_login"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"fv-az168-260"},{"name":"thread","value":"2161-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"country_code_data","value":"{'country': 'Afghanistan', 'code': '+93'}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["@pytest.mark.usefixtures('setup')"]},"source":"2d44ad5e23b6d5dd.json","parameterValues":["{'country': 'Afghanistan', 'code': '+93'}"]}